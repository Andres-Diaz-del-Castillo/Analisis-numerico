Punto 2.

A)

Funcion recursiva en python que encuentra raices y contador de iteraciones utilizando funciÃ³n dada.

from __future__ import division
 
def metodo(f, x, h=.00001):  //SE DEFINE F, X, MARGEN DE RROR
    return (f(x)(f(x,-1)-f(x,-2))/ (f(x)(f(x,-1)-f(x,-2)) //SE HACE FUNCION Y RETORNA VALORES DE FORMA RECURSIVA 
 
def metodo_parcial(f, x, tolerancia=.0001):  //SE DEFINE TOLERANCIA PARA METODO RECURSIVO
    pasos_requeridos = 0
 
    while abs(f(x)) > tolerancia:
        df = metodo(f, x)
        x = x - f(x)/df
            contador+= 1  //CONTADOR PARA NUMERO DE ITERACIONES EN EL METODO
    return x, pasos_requeridos  //SE RETORNA EL VALOR DE X Y LOS PASOS REQUERIDOS (CONTADOR)
 

print "Las raices son:", root   //SE RETORNAN RAICES
print "Contador de iteraciones:", contador  //SE RETORNA CONTADOR CON NUMERO DE ITERACIONES

B) Se utiliza el metodo de la secante para solucionar:

rm(list=ls())
Fx <- function(x) tan(pi*x)  //FUNCION 1
F1x <- function(x) cos(pi*x)   //FUNCION 2

secante <- function(x0,x1) {
x<-(Fx(x1)*x0-Fx(x0)*x1)/(Fx(x1)-Fx(x0))
error <-1
while (error > 1.e-4) {      //MARGEN DE ERROR ESTABLECIDO
x0<-x1
x1<-x
x<-(Fx(x1)*x0-Fx(x0)*x1)/(Fx(x1)-Fx(x0))
if (Fx(x) == 0) break
error<-abs(Fx(x)/F1x(x))
cat("X=",x,"\t","E=",error,"\n")
}
}
secante(0,4)   //SE HACE LA PRUEBA CON (0,4)



CAPTURA DE PANTALLA DE TABLA:   https://i.imgur.com/ioTz2W7.png
